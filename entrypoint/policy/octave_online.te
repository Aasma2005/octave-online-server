# Copyright Â© 2018, Octave Online LLC
#
# This file is part of Octave Online Server.
#
# Octave Online Server is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# Octave Online Server is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Octave Online Server.  If not, see
# <https://www.gnu.org/licenses/>.

policy_module(octave_online, 1.9);

### TO SETUP THIS POLICY FILE:
#
# 0. Make sure the following packages are installed:
#
#    selinux-policy-devel
#    policycoreutils-sandbox
#    selinux-policy-sandbox
#
# 1. Copy or symlink this file to /etc/selinux/targeted/policy
#
# 2. Run the following commands as root:
#
#    make -f /usr/share/selinux/devel/Makefile octave_online.pp
#    semodule -i octave_online.pp
#
# 3. Apply file permissions:
#
#    restorecon -R -v /usr/local/lib/octave
#
###

require {
	type file_t;
	type home_root_t;
	type passwd_file_t;
	type sandbox_t;
	type sysfs_t;
	type tmp_t;
	type unconfined_service_t;
	type unconfined_t;
	type unlabeled_t;
	type urandom_device_t;

	class chr_file open;
	class dir { read open search getattr write add_name };
	class file { open execute };
	class lnk_file read;
	class process { dyntransition transition sigchld };
	class unix_stream_socket { read write ioctl getattr connectto };
}

# Create a new file permission context for GNU Octave site files.
type octave_site_t;
files_type(octave_site_t);

# Create file type for temporary files
type oo_tmp_t;
files_type(oo_tmp_t);

# Create file type for OO server files.
type srv_oo_t;
files_type(srv_oo_t);

# Create domains for running the Octave Online process (see supplement.te/if)
# type oo_t;
# type oo_exec_t;
# init_daemon_domain(oo_t, oo_exec_t);
# type oo_unit_file_t;
# systemd_unit_file(oo_unit_file_t);

# Allow system_r to run and spawn sandbox_t
# (required when running application as a systemd service)
role system_r types sandbox_t;
allow unconfined_service_t sandbox_t:process { dyntransition transition };
allow sandbox_t unconfined_service_t:process sigchld;

# Allow sandbox applications to communicate over UNIX sockets, which is
# required for non-blocking mode.
allow sandbox_t unconfined_t:unix_stream_socket { read write ioctl getattr };
allow sandbox_t unconfined_service_t:unix_stream_socket { read write ioctl getattr };
allow sandbox_t self:unix_stream_socket connectto;

# I tried making oo_tmp_t, but tmp_t is still being inherited, so
# the following rule is required.
#allow sandbox_t tmp_t:dir { write add_name create };

# The following line eliminates more errors from the audit file, and
# seem to be necessary to enable Octave to load files from the sandbox
# home path.
allow sandbox_t home_root_t:dir { search getattr };

# The following line enables Octave to access urandom.  Without this,
# there are a lot of audit errors, and the oo-events.txt results in a
# segmentation fault.
# NOTE: This could instead be allowed using 'global_ssp'
allow sandbox_t urandom_device_t:chr_file open;

# Give permissions to read and execute octave_site_t to sandbox
allow sandbox_t octave_site_t:file { open execute map };
allow sandbox_t octave_site_t:dir { read open search getattr };
allow sandbox_t octave_site_t:lnk_file read;

# Don't-Audit rules for sandbox to clean up log files a bit
dontaudit sandbox_t passwd_file_t:file open;
dontaudit sandbox_t sysfs_t:dir read;
